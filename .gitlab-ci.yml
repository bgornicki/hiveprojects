stages:
  - build
  - deploy

image: docker:git

services:
  - docker:dind

variables:
  STACK_NAME: hiveprojects

build:
  stage: build
  only:
    - develop
    - production
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - docker build -f app/Dockerfile app -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  after_script:
    - docker images

.deploy: &deploy
  stage: deploy
  when: manual

  before_script:
    - mkdir -p ~/.docker
    - echo "$CORE_SWARM_TLSCACERT" > ~/.docker/ca.pem
    - echo "$CORE_SWARM_TLSCERT" > ~/.docker/cert.pem
    - echo "$CORE_SWARM_TLSKEY" > ~/.docker/key.pem
    - echo $CORE_DEPLOY_TOKEN_KEY | docker -H $CORE_SWARM_HOST --tlsverify login -u $CORE_DEPLOY_TOKEN_NAME $CI_REGISTRY --password-stdin
    # Pull all necessary images before deploy
    - cat ${STACK_FILE} | grep -oE 'image:([ a-zA-Z0-9\:\/\.-]*)' | sed "s~image:~~g" | while read -r image ; do docker -H $CORE_SWARM_HOST --tlsverify pull $image; done

  script:
    - docker -H $CORE_SWARM_HOST --tlsverify stack deploy -c ${STACK_FILE} --with-registry-auth ${STACK_NAME}-${STACK_ENV}

deploy-staging:
  variables:
    STACK_FILE: stack/docker-compose.staging.yml
    STACK_ENV: staging
  environment:
    name: staging
    url: https://staging.hiveprojects.io
  only:
    - develop
  <<: *deploy

deploy-production:
  variables:
    STACK_FILE: stack/docker-compose.production.yml
    STACK_ENV: production
  environment:
    name: production
    url: https://hiveprojects.io
  only:
    - production
  <<: *deploy

